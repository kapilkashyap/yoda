/**
 * A basic HTTP server made using NodeJS which is light weight, has a small footprint yet is powerful. Reminds me of Yoda! :P
 * 
 * author: kapil kashyap
 */
const config = require('./config.json');
const fs = require('fs');
const http = require('http');
const url = require('url');
const fsPromise = fs.promises;

if (config && config.host && config.port) {
    const serverRunningOn = `http://${config.host}:${config.port}`;
    // utility method to determine the type of content being accessed
    const getContentType = (urlPath) => {
        if (urlPath.indexOf('.js') !== -1 || urlPath.indexOf('.mjs') !== -1) {
            return 'text/javascript';
        }
        if (urlPath.indexOf('.json') !== -1) {
            return 'application/json';
        }
        if (urlPath.indexOf('.css') !== -1) {
            return 'text/css';
        }
        if (config.imageTypeExtensions.find(x => urlPath.indexOf(x) !== -1)) {
            return 'image';
        }
        if (urlPath.indexOf('.txt') !== -1) {
            return 'text/plain';
        }
        if (urlPath.indexOf('.xml') !== -1) {
            return 'application/xml';
        }
        return 'text/html';
    };

    // a request listener method that will be used to parse all the incoming requests
    const requestListener = (req, res) => {
        // parse the requested url
        const parsedUrl = url.parse(req.url, true);
        // fetch the content type of the requested resource
        const contentType = getContentType(parsedUrl.pathname);
        // generated a base url to be used to load resources
        const baseUrl = __dirname + config.base;

        // check if we are access the root
        if (parsedUrl.pathname === '/') {
            // read examples directory to generate list of examples on runtime
            fs.readdir(baseUrl + '/examples', (err, directories) => {
                let html = '<!-- This file is dynamically generated by the server -->\r\n';
                if (err) {
                    console.log(err);
                } else {
                    let _url = null;
                    // iterate through the directories and generate a url for each example
                    directories.forEach(directory => { 
                        // assuming that index.html is the end-point to access the example
                        _url = `${serverRunningOn}/examples/${directory}/index.html`;
                        // html construct to be displayed on home page
                        html += `<div class="entry"><a href="${_url}" target="_blank">${directory}</a></div>`;
                    });

                    // once the html construct is ready, write it into examples.html file
                    // this file will be used on the home page to display a list of examples
                    fs.writeFile(`${baseUrl}/artifacts/examples.html`, html, (err) => { 
                        if (err) {
                            console.log(err); 
                        }
                    }); 
                }
            });
            // load the home page
            fsPromise.readFile(`${baseUrl}/artifacts/home.html`).then((contents) => {
                // set the proper content type
                res.setHeader('Content-Type', contentType);
                res.writeHead(200);
                res.end(contents);
            });
        } else {
            // if we are not accessing the root, try to read the file and load its contents
            fsPromise.readFile(baseUrl + parsedUrl.pathname).then((contents) => {
                // set the proper content type
                res.setHeader('Content-Type', contentType);
                res.writeHead(200);
                res.end(contents);
            }).catch(err => {
                // if the path is invalid, then display an error page displaying the exception
                const errorMsgCntrStyle = `
                    display: flex;
                    margin-top: 20px;
                    justify-content: center;
                    flex-direction: column;
                `;
                const errorMsgHeaderStyle = `
                    display: flex;    
                    background-color: #757575;
                    height: 40px;
                    font-size: x-large;
                    color: #ffffff;
                    align-items: center;
                    margin: 0 0 10px 0;
                    padding: 0 5px;
                `;
                const errorMsgStyle = `
                    padding: 0 5px;
                `;
                // set the proper content type
                res.setHeader('Content-Type', 'text/html');
                res.writeHead(500);
                res.end(`
                    <div style="${errorMsgCntrStyle}">
                        <div style="${errorMsgHeaderStyle}">The greatest teacher, failure is.</div>
                        <div style="${errorMsgStyle}">${err}</div>
                    </div>
                `);
                return;
            })
        }
    }

    // create a HTTP server by passing it the request listener function
    const server = http.createServer(requestListener);
    // register the server to listen on the configured host and port
    server.listen(config.port, config.host, () => {
        // display a server up and running message on Node CLI
        console.log(`Server is up and running on ${serverRunningOn}`);
    });
} else {
    // display an error message on Node CLI
    console.log(`Server could not be started. Please make sure your configuration file is correct.`);
}
